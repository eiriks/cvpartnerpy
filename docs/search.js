window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cvpartner", "modulename": "cvpartner", "kind": "module", "doc": "<h2 id=\"cvpartner-scraper\">CVPartner scraper</h2>\n\n<p>This is a package for scraping the cvpartner api</p>\n\n<h3 id=\"getting-started\">Getting started</h3>\n\n<p>Install this fork of cvpartnerpy from this repo:\n<code>pip install git+https://github.com/eiriks/cvpartnerpy.git</code></p>\n\n<h4 id=\"usage\">Usage</h4>\n\n<p>The package has support for getting user metadata and CVs attached to users.\nThis can be used to scrape out all user CVs from the api:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cvpartner</span> <span class=\"kn\">import</span> <span class=\"n\">CVPartner</span>\n\n<span class=\"n\">cvp</span> <span class=\"o\">=</span> <span class=\"n\">CVPartner</span><span class=\"p\">(</span><span class=\"n\">org</span><span class=\"o\">=</span><span class=\"s1\">&#39;myorg&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">&#39;CVPARTNER_API_KEY&#39;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>Search for single CV</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">IPython.display</span> <span class=\"kn\">import</span> <span class=\"n\">HTML</span><span class=\"p\">,</span> <span class=\"n\">display</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cvpartner.types.search_result</span> <span class=\"kn\">import</span> <span class=\"n\">SearchItem</span>\n\n<span class=\"c1\"># Find a CV to work on:</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">cvp</span><span class=\"o\">.</span><span class=\"n\">search_users</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">&#39;Rufus Scrimgeour&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\"> users found&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">table</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;user_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cv_id&quot;</span><span class=\"p\">]]</span>\n<span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">SearchItem</span>\n    <span class=\"c1\">#print(user.name, &quot;\\t\\t\\t\\t|&quot;, user.user_id, &quot;\\t|&quot;, user.default_cv_id)</span>\n    <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">default_cv_id</span><span class=\"p\">])</span>\n\n<span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">HTML</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;&lt;table&gt;&lt;tr&gt;</span><span class=\"si\">{}</span><span class=\"s1\">&lt;/tr&gt;&lt;/table&gt;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;&lt;/tr&gt;&lt;tr&gt;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;&lt;td&gt;</span><span class=\"si\">{}</span><span class=\"s1\">&lt;/td&gt;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;/td&gt;&lt;td&gt;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Retrieve a spesific CV.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">user_cv</span> <span class=\"o\">=</span> <span class=\"n\">cvp</span><span class=\"o\">.</span><span class=\"n\">get_user_cv</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5a16db...b862&#39;</span><span class=\"p\">,</span>\n                          <span class=\"n\">cv_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;5a1...eb863&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Retrieve a full department:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">DEPARTMENT_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Department of Magical Accidents and Catastrophes&#39;</span>\n\n<span class=\"n\">department</span> <span class=\"o\">=</span> <span class=\"n\">cvp</span><span class=\"o\">.</span><span class=\"n\">get_emploees_and_cvs_from_department</span><span class=\"p\">(</span><span class=\"n\">DEPARTMENT_NAME</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "cvpartner.cvpartner", "modulename": "cvpartner.cvpartner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.cvpartner.USERS_URL_BASE", "modulename": "cvpartner.cvpartner", "qualname": "USERS_URL_BASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v1/users?offset={offset}&#x27;"}, {"fullname": "cvpartner.cvpartner.USERS_URL_BASE_SEARCH", "modulename": "cvpartner.cvpartner", "qualname": "USERS_URL_BASE_SEARCH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v2/users/search?deactivated=false&amp;name={name}&#x27;"}, {"fullname": "cvpartner.cvpartner.USERS_URL_BASE_SEARCH_V4", "modulename": "cvpartner.cvpartner", "qualname": "USERS_URL_BASE_SEARCH_V4", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v4/search&#x27;"}, {"fullname": "cvpartner.cvpartner.CV_URL_BASE", "modulename": "cvpartner.cvpartner", "qualname": "CV_URL_BASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v3/cvs/{user_id}/{cv_id}&#x27;"}, {"fullname": "cvpartner.cvpartner.COUNTRIES", "modulename": "cvpartner.cvpartner", "qualname": "COUNTRIES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v1/countries&#x27;"}, {"fullname": "cvpartner.cvpartner.URL_CUSTOMER_SEARCH", "modulename": "cvpartner.cvpartner", "qualname": "URL_CUSTOMER_SEARCH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v2/company/cv/customers?customer_name={customer_name}&amp;size={size}&amp;offset={offset}&#x27;"}, {"fullname": "cvpartner.cvpartner.URL_CUSTOMER", "modulename": "cvpartner.cvpartner", "qualname": "URL_CUSTOMER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://{org}.cvpartner.com/api/v2/company/cv/customers/{customer_id}/projects/{project_id}&#x27;"}, {"fullname": "cvpartner.cvpartner.log", "modulename": "cvpartner.cvpartner", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cvpartner.cvpartner (WARNING)&gt;"}, {"fullname": "cvpartner.cvpartner.CVPartner", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner", "kind": "class", "doc": "<p>Class for interacting with CVPartner API. Docs for API at docs.cvpartner.com</p>\n"}, {"fullname": "cvpartner.cvpartner.CVPartner.__init__", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.__init__", "kind": "function", "doc": "<p>Set up the CVPartner API client.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">org</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cvpartner.cvpartner.CVPartner.ERROR_MESSAGE_DECODE", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.ERROR_MESSAGE_DECODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Couldn&#x27;t decode response from CVPartner:\\n&quot;"}, {"fullname": "cvpartner.cvpartner.CVPartner.ERROR_MESSAGE_PARSE", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.ERROR_MESSAGE_PARSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Couldn&#x27;t parse response from CVPartner:\\n&quot;"}, {"fullname": "cvpartner.cvpartner.CVPartner.org", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.org", "kind": "variable", "doc": "<p>Name of the organization in CVPartner. It's the subdomain in the URL.</p>\n"}, {"fullname": "cvpartner.cvpartner.CVPartner.verbose", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.verbose", "kind": "variable", "doc": "<p>If True, print debug messages to stdout.</p>\n"}, {"fullname": "cvpartner.cvpartner.CVPartner.get_customers_by_name", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.get_customers_by_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">customer_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">Customers</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.cvpartner.CVPartner.get_emploees_by_department", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.get_emploees_by_department", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">office_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Data Engineering&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">Employee</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.cvpartner.CVPartner.get_emploees_and_cvs_from_department", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.get_emploees_and_cvs_from_department", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">office_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Data Engineering&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.cvpartner.CVPartner.search_users", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.search_users", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">only_norway</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">search_result</span><span class=\"o\">.</span><span class=\"n\">SearchResults</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.cvpartner.CVPartner.get_user_cv", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.get_user_cv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">cv_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.cvpartner.CVPartner.list_countries", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.list_countries", "kind": "function", "doc": "<p>Lists the countries in the organization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">country</span><span class=\"o\">.</span><span class=\"n\">Countries</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.cvpartner.CVPartner.list_offices_from_country", "modulename": "cvpartner.cvpartner", "qualname": "CVPartner.list_offices_from_country", "kind": "function", "doc": "<p>return name and Id of offices, aka departments</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">country_code</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">country</span><span class=\"o\">.</span><span class=\"n\">Office</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.graphs", "modulename": "cvpartner.graphs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.graphs.create_person_node", "modulename": "cvpartner.graphs", "qualname": "create_person_node", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.graphs.get_all_people_graph", "modulename": "cvpartner.graphs", "qualname": "get_all_people_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">noa_departments</span>,</span><span class=\"param\">\t<span class=\"n\">add_roles</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">add_tags</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.graphs.get_roles_and_people_graph", "modulename": "cvpartner.graphs", "qualname": "get_roles_and_people_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">department</span></span><span class=\"return-annotation\">) -> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.graphs.get_skills_and_people_graph", "modulename": "cvpartner.graphs", "qualname": "get_skills_and_people_graph", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">department</span></span><span class=\"return-annotation\">) -> <span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers", "modulename": "cvpartner.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.helpers.logger", "modulename": "cvpartner.helpers", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cvpartner.helpers (WARNING)&gt;"}, {"fullname": "cvpartner.helpers.create_dates_from_project", "modulename": "cvpartner.helpers", "qualname": "create_dates_from_project", "kind": "function", "doc": "<p>Function to make a best guess at the start and end dates of a project.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperience</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.sort_projects", "modulename": "cvpartner.helpers", "qualname": "sort_projects", "kind": "function", "doc": "<p>Sort projects by date, newest first or oldest first.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">return_newest_first</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_days_since_last_finished_project", "modulename": "cvpartner.helpers", "qualname": "get_days_since_last_finished_project", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">project</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.newest_project_is_older_than_n_months", "modulename": "cvpartner.helpers", "qualname": "newest_project_is_older_than_n_months", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>, </span><span class=\"param\"><span class=\"n\">n_months</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_projects", "modulename": "cvpartner.helpers", "qualname": "get_new_projects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_courses", "modulename": "cvpartner.helpers", "qualname": "get_new_courses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Course</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_number_of_new_courses_by_department", "modulename": "cvpartner.helpers", "qualname": "get_number_of_new_courses_by_department", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_certification", "modulename": "cvpartner.helpers", "qualname": "get_new_certification", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Certification</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_number_of_new_sertifications_from_department", "modulename": "cvpartner.helpers", "qualname": "get_number_of_new_sertifications_from_department", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_positions", "modulename": "cvpartner.helpers", "qualname": "get_new_positions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Position</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_honors_and_awards", "modulename": "cvpartner.helpers", "qualname": "get_new_honors_and_awards", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">HonorsAward</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_presentations", "modulename": "cvpartner.helpers", "qualname": "get_new_presentations", "kind": "function", "doc": "<p>Retrieves a list of new presentations from the given CV response.</p>\n\n<p>Args:\n    cv (CVResponse): The CV response object containing the presentations.\n    days_to_look_back (int, optional): The number of days to look back for new presentations. Defaults to 365.\n    language (str, optional): The language to use for logging warnings. Defaults to 'no'.</p>\n\n<p>Returns:\n    list[Presentation]: A list of new presentations.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Presentation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_work_experiences", "modulename": "cvpartner.helpers", "qualname": "get_new_work_experiences", "kind": "function", "doc": "<p>Not very relevant as work experience is emplyers.\nWe mostly care about work done in current posistion.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">WorkExperience</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_proper_project_dates", "modulename": "cvpartner.helpers", "qualname": "get_proper_project_dates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_project_experiences", "modulename": "cvpartner.helpers", "qualname": "get_new_project_experiences", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_old_project_experiences", "modulename": "cvpartner.helpers", "qualname": "get_old_project_experiences", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>,</span><span class=\"param\">\t<span class=\"n\">older_than_days</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_new_educations", "modulename": "cvpartner.helpers", "qualname": "get_new_educations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span>, </span><span class=\"param\"><span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_degree_candidates", "modulename": "cvpartner.helpers", "qualname": "get_degree_candidates", "kind": "function", "doc": "<p>Function to return a standard name for a degree, from a user input string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">degree</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_highest_degree", "modulename": "cvpartner.helpers", "qualname": "get_highest_degree", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_email", "modulename": "cvpartner.helpers", "qualname": "get_email", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">person</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">Employee</span>,</span><span class=\"param\">\t<span class=\"n\">convert_to_lowercase</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_graduation_year", "modulename": "cvpartner.helpers", "qualname": "get_graduation_year", "kind": "function", "doc": "<p>Get the finnal year of the last compleated education</p>\n\n<p>Args:\n    cv (dict): CVpartner cv object</p>\n\n<p>Returns:\n    Optional[int]: the year as int (eg 2008) or None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_age", "modulename": "cvpartner.helpers", "qualname": "get_age", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.add_space_around_slash", "modulename": "cvpartner.helpers", "qualname": "add_space_around_slash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.clean_name", "modulename": "cvpartner.helpers", "qualname": "clean_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.remove_extra_whitespace", "modulename": "cvpartner.helpers", "qualname": "remove_extra_whitespace", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.remove_ending_period", "modulename": "cvpartner.helpers", "qualname": "remove_ending_period", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.convert_developer_to_utvikler", "modulename": "cvpartner.helpers", "qualname": "convert_developer_to_utvikler", "kind": "function", "doc": "<p>substitute developer with utvikler, disregard case</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.convert_enginer_to_engineer", "modulename": "cvpartner.helpers", "qualname": "convert_enginer_to_engineer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.rename_common_variations_in_dev", "modulename": "cvpartner.helpers", "qualname": "rename_common_variations_in_dev", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_role_from_cv_roles", "modulename": "cvpartner.helpers", "qualname": "get_role_from_cv_roles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv_role</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">lang</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_tags_from_cv", "modulename": "cvpartner.helpers", "qualname": "get_tags_from_cv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">lang</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;no&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_keywords_from_projects", "modulename": "cvpartner.helpers", "qualname": "get_keywords_from_projects", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">projects</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.helpers.get_avg_new_keywords_pr_department", "modulename": "cvpartner.helpers", "qualname": "get_avg_new_keywords_pr_department", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.make_slides", "modulename": "cvpartner.make_slides", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.make_slides.add_experience_slide", "modulename": "cvpartner.make_slides", "qualname": "add_experience_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Presentation</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">projects</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.make_slides.add_course_slide", "modulename": "cvpartner.make_slides", "qualname": "add_course_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Presentation</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">courses</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Course</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">233</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.make_slides.add_certification_slide", "modulename": "cvpartner.make_slides", "qualname": "add_certification_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Presentation</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">certifications</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Certification</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.make_slides.add_presentation_slide", "modulename": "cvpartner.make_slides", "qualname": "add_presentation_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Presentation</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">presentations</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Presentation</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">237</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.make_slides.add_honors_and_awards_slide", "modulename": "cvpartner.make_slides", "qualname": "add_honors_and_awards_slide", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prs</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">Presentation</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">layout</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">honors_and_awards</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">HonorsAward</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">237</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.make_slides.make_ppt_from_year_in_review", "modulename": "cvpartner.make_slides", "qualname": "make_ppt_from_year_in_review", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">projects_worked_on</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">new_courses</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Course</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">new_certifications</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Certification</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">new_presentations</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Presentation</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">new_honors_and_awards</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">HonorsAward</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">department_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Data engineering&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports", "modulename": "cvpartner.reports", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.reports.logger", "modulename": "cvpartner.reports", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger cvpartner.reports (WARNING)&gt;"}, {"fullname": "cvpartner.reports.print_people_with_older_unclosed_projects", "modulename": "cvpartner.reports", "qualname": "print_people_with_older_unclosed_projects", "kind": "function", "doc": "<p>Get all users with older unclosed projects</p>\n\n<p>Args:\n    department (list[tuple(dict, dict)]): list of tuples with (cv, user)</p>\n\n<p>Returns:\n    list[tuple[Employee, dict]]: list of tuples with (Employee, cv)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">Employee</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.print_people_with_new_certifications", "modulename": "cvpartner.reports", "qualname": "print_people_with_new_certifications", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_people_with_new_projects", "modulename": "cvpartner.reports", "qualname": "get_people_with_new_projects", "kind": "function", "doc": "<p>Get all users with new projects. \nReturns a dictionary with the user name as key and a list of projects as value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceExpanded</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_people_with_new_courses", "modulename": "cvpartner.reports", "qualname": "get_people_with_new_courses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Course</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.print_people_with_new_courses", "modulename": "cvpartner.reports", "qualname": "print_people_with_new_courses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_people_with_new_certifications", "modulename": "cvpartner.reports", "qualname": "get_people_with_new_certifications", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Certification</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.print_people_who_might_have_forgotten_to_put_current_work_on_cv", "modulename": "cvpartner.reports", "qualname": "print_people_who_might_have_forgotten_to_put_current_work_on_cv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">months_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_people_with_new_presentations", "modulename": "cvpartner.reports", "qualname": "get_people_with_new_presentations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">Presentation</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.print_people_with_new_presentations", "modulename": "cvpartner.reports", "qualname": "print_people_with_new_presentations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_people_with_new_honors_and_awards", "modulename": "cvpartner.reports", "qualname": "get_people_with_new_honors_and_awards", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">HonorsAward</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.print_people_with_new_honors_and_awards", "modulename": "cvpartner.reports", "qualname": "print_people_with_new_honors_and_awards", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">days_to_look_back</span><span class=\"o\">=</span><span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_skills_keyword", "modulename": "cvpartner.reports", "qualname": "get_skills_keyword", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">project_experience_skills</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">ProjectExperienceSkill</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.get_year_in_review", "modulename": "cvpartner.reports", "qualname": "get_year_in_review", "kind": "function", "doc": "<p>This function takes a department and a number of days to look back, and returns a list of people\nand the new stuff they have added to their CV in the given period.</p>\n\n<p>Args:\n    department (Department): The department for which to retrieve the year in review.\n    n_days_to_look_back (int, optional): The number of days to look back. Defaults to 365.</p>\n\n<p>Returns:\n    tuple: A tuple containing the following lists:\n        - projects_worked_on: List of people with new projects.\n        - new_courses: List of people with new courses.\n        - new_certifications: List of people with new certifications.\n        - new_presentations: List of people with new presentations.\n        - new_honors_and_awards: List of people with new honors and awards.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">department</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">department</span><span class=\"o\">.</span><span class=\"n\">Department</span>,</span><span class=\"param\">\t<span class=\"n\">n_days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.reports.print_new_items_on_cv", "modulename": "cvpartner.reports", "qualname": "print_new_items_on_cv", "kind": "function", "doc": "<p>Prints the new items on a CV within a specified number of days.</p>\n\n<p>Args:\n    cv (CVResponse): The CV to print the new items from.\n    days_to_look_back (int, optional): The number of days to look back for new items. Defaults to 365.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cv</span><span class=\"p\">:</span> <span class=\"n\">cvpartner</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">cv</span><span class=\"o\">.</span><span class=\"n\">CVResponse</span>, </span><span class=\"param\"><span class=\"n\">days_to_look_back</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">365</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.types", "modulename": "cvpartner.types", "kind": "module", "doc": "<h1 id=\"types-from-pydantic\">Types from pydantic</h1>\n\n<p>These types are generated with <a href=\"https://jsontopydantic.com/\">https://jsontopydantic.com/</a> for pydantic 2.7.</p>\n"}, {"fullname": "cvpartner.types.country", "modulename": "cvpartner.types.country", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.country.Office", "modulename": "cvpartner.types.country", "qualname": "Office", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.country.Office.id", "modulename": "cvpartner.types.country", "qualname": "Office.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Office.name", "modulename": "cvpartner.types.country", "qualname": "Office.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Office.selected", "modulename": "cvpartner.types.country", "qualname": "Office.selected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.country.Office.default_word_template_id", "modulename": "cvpartner.types.country", "qualname": "Office.default_word_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.country.Office.default_ppt_template_id", "modulename": "cvpartner.types.country", "qualname": "Office.default_ppt_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.country.Office.country_id", "modulename": "cvpartner.types.country", "qualname": "Office.country_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Office.country_code", "modulename": "cvpartner.types.country", "qualname": "Office.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Office.override_language_code", "modulename": "cvpartner.types.country", "qualname": "Office.override_language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.country.Office.num_users", "modulename": "cvpartner.types.country", "qualname": "Office.num_users", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.country.Office.num_users_activated", "modulename": "cvpartner.types.country", "qualname": "Office.num_users_activated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.country.Office.num_users_deactivated", "modulename": "cvpartner.types.country", "qualname": "Office.num_users_deactivated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.country.Office.model_config", "modulename": "cvpartner.types.country", "qualname": "Office.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Office.model_post_init", "modulename": "cvpartner.types.country", "qualname": "Office.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    __context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">__context</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.types.country.Office.model_fields", "modulename": "cvpartner.types.country", "qualname": "Office.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;selected&#x27;: FieldInfo(annotation=bool, required=True), &#x27;default_word_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;default_ppt_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;country_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;country_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;override_language_code&#x27;: FieldInfo(annotation=Any, required=True), &#x27;num_users&#x27;: FieldInfo(annotation=int, required=True), &#x27;num_users_activated&#x27;: FieldInfo(annotation=int, required=True), &#x27;num_users_deactivated&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.country.Office.model_computed_fields", "modulename": "cvpartner.types.country", "qualname": "Office.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Setting", "modulename": "cvpartner.types.country", "qualname": "Setting", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.country.Setting.model_config", "modulename": "cvpartner.types.country", "qualname": "Setting.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Setting.model_post_init", "modulename": "cvpartner.types.country", "qualname": "Setting.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    __context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">__context</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.types.country.Setting.model_fields", "modulename": "cvpartner.types.country", "qualname": "Setting.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Setting.model_computed_fields", "modulename": "cvpartner.types.country", "qualname": "Setting.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Country", "modulename": "cvpartner.types.country", "qualname": "Country", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.country.Country.id", "modulename": "cvpartner.types.country", "qualname": "Country.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Country.code", "modulename": "cvpartner.types.country", "qualname": "Country.code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Country.native_language_code", "modulename": "cvpartner.types.country", "qualname": "Country.native_language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.country.Country.override_ui_language_code", "modulename": "cvpartner.types.country", "qualname": "Country.override_ui_language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.country.Country.selected", "modulename": "cvpartner.types.country", "qualname": "Country.selected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.country.Country.default_ppt_template_id", "modulename": "cvpartner.types.country", "qualname": "Country.default_ppt_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.country.Country.default_word_template_id", "modulename": "cvpartner.types.country", "qualname": "Country.default_word_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.country.Country.offices", "modulename": "cvpartner.types.country", "qualname": "Country.offices", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.country.Office]"}, {"fullname": "cvpartner.types.country.Country.setting", "modulename": "cvpartner.types.country", "qualname": "Country.setting", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.country.Setting"}, {"fullname": "cvpartner.types.country.Country.model_config", "modulename": "cvpartner.types.country", "qualname": "Country.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Country.model_post_init", "modulename": "cvpartner.types.country", "qualname": "Country.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    __context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">__context</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.types.country.Country.model_fields", "modulename": "cvpartner.types.country", "qualname": "Country.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;code&#x27;: FieldInfo(annotation=str, required=True), &#x27;native_language_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;override_ui_language_code&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;selected&#x27;: FieldInfo(annotation=bool, required=True), &#x27;default_ppt_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;default_word_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;offices&#x27;: FieldInfo(annotation=List[Office], required=True), &#x27;setting&#x27;: FieldInfo(annotation=Setting, required=True)}"}, {"fullname": "cvpartner.types.country.Country.model_computed_fields", "modulename": "cvpartner.types.country", "qualname": "Country.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.country.Countries", "modulename": "cvpartner.types.country", "qualname": "Countries", "kind": "class", "doc": "<p>Root model for countries</p>\n", "bases": "pydantic.main.BaseModel, typing.Generic[~RootModelRootType]"}, {"fullname": "cvpartner.types.country.Countries.root", "modulename": "cvpartner.types.country", "qualname": "Countries.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.country.Country]"}, {"fullname": "cvpartner.types.customer", "modulename": "cvpartner.types.customer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.customer.CustomerName", "modulename": "cvpartner.types.customer", "qualname": "CustomerName", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.CustomerName.int", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.CustomerName.fi", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.fi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.CustomerName.no", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.CustomerName.se", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.se", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.CustomerName.dk", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.dk", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.CustomerName.model_config", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.CustomerName.model_fields", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;int&#x27;: FieldInfo(annotation=str, required=True), &#x27;fi&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;no&#x27;: FieldInfo(annotation=str, required=True), &#x27;se&#x27;: FieldInfo(annotation=str, required=True), &#x27;dk&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.customer.CustomerName.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "CustomerName.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.CustomerDescription", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescription", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.CustomerDescription.no", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescription.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.CustomerDescription.int", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescription.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.CustomerDescription.model_config", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescription.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.CustomerDescription.model_fields", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescription.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;no&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;int&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.customer.CustomerDescription.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescription.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.CustomerDescriptionToCvs", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescriptionToCvs", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.CustomerDescriptionToCvs.no", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescriptionToCvs.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.CustomerDescriptionToCvs.int", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescriptionToCvs.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.CustomerDescriptionToCvs.model_config", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescriptionToCvs.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.CustomerDescriptionToCvs.model_fields", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescriptionToCvs.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;no&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;int&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.customer.CustomerDescriptionToCvs.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "CustomerDescriptionToCvs.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Thumb", "modulename": "cvpartner.types.customer", "qualname": "Thumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.Thumb.url", "modulename": "cvpartner.types.customer", "qualname": "Thumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.Thumb.model_config", "modulename": "cvpartner.types.customer", "qualname": "Thumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Thumb.model_fields", "modulename": "cvpartner.types.customer", "qualname": "Thumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "cvpartner.types.customer.Thumb.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "Thumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.FitThumb", "modulename": "cvpartner.types.customer", "qualname": "FitThumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.FitThumb.url", "modulename": "cvpartner.types.customer", "qualname": "FitThumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.FitThumb.model_config", "modulename": "cvpartner.types.customer", "qualname": "FitThumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.FitThumb.model_fields", "modulename": "cvpartner.types.customer", "qualname": "FitThumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "cvpartner.types.customer.FitThumb.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "FitThumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Large", "modulename": "cvpartner.types.customer", "qualname": "Large", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.Large.url", "modulename": "cvpartner.types.customer", "qualname": "Large.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.Large.model_config", "modulename": "cvpartner.types.customer", "qualname": "Large.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Large.model_fields", "modulename": "cvpartner.types.customer", "qualname": "Large.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "cvpartner.types.customer.Large.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "Large.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.SmallThumb", "modulename": "cvpartner.types.customer", "qualname": "SmallThumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.SmallThumb.url", "modulename": "cvpartner.types.customer", "qualname": "SmallThumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.SmallThumb.model_config", "modulename": "cvpartner.types.customer", "qualname": "SmallThumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.SmallThumb.model_fields", "modulename": "cvpartner.types.customer", "qualname": "SmallThumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True)}"}, {"fullname": "cvpartner.types.customer.SmallThumb.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "SmallThumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Image", "modulename": "cvpartner.types.customer", "qualname": "Image", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.Image.url", "modulename": "cvpartner.types.customer", "qualname": "Image.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.Image.thumb", "modulename": "cvpartner.types.customer", "qualname": "Image.thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.Thumb"}, {"fullname": "cvpartner.types.customer.Image.fit_thumb", "modulename": "cvpartner.types.customer", "qualname": "Image.fit_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.FitThumb"}, {"fullname": "cvpartner.types.customer.Image.large", "modulename": "cvpartner.types.customer", "qualname": "Image.large", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.Large"}, {"fullname": "cvpartner.types.customer.Image.small_thumb", "modulename": "cvpartner.types.customer", "qualname": "Image.small_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.SmallThumb"}, {"fullname": "cvpartner.types.customer.Image.model_config", "modulename": "cvpartner.types.customer", "qualname": "Image.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Image.model_fields", "modulename": "cvpartner.types.customer", "qualname": "Image.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;thumb&#x27;: FieldInfo(annotation=Thumb, required=True), &#x27;fit_thumb&#x27;: FieldInfo(annotation=FitThumb, required=True), &#x27;large&#x27;: FieldInfo(annotation=Large, required=True), &#x27;small_thumb&#x27;: FieldInfo(annotation=SmallThumb, required=True)}"}, {"fullname": "cvpartner.types.customer.Image.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "Image.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Values", "modulename": "cvpartner.types.customer", "qualname": "Values", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.Values.int", "modulename": "cvpartner.types.customer", "qualname": "Values.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Values.no", "modulename": "cvpartner.types.customer", "qualname": "Values.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Values.se", "modulename": "cvpartner.types.customer", "qualname": "Values.se", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Values.model_config", "modulename": "cvpartner.types.customer", "qualname": "Values.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Values.model_fields", "modulename": "cvpartner.types.customer", "qualname": "Values.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;int&#x27;: FieldInfo(annotation=str, required=True), &#x27;no&#x27;: FieldInfo(annotation=str, required=True), &#x27;se&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.customer.Values.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "Values.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.IndustryItem", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.IndustryItem.id", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.IndustryItem.values", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.values", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.Values"}, {"fullname": "cvpartner.types.customer.IndustryItem.external_unique_id", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.customer.IndustryItem.help_text", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.help_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.customer.IndustryItem.company_id", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.company_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.IndustryItem.created_at", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.created_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.IndustryItem.updated_at", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.IndustryItem.model_config", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.IndustryItem.model_post_init", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    __context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">__context</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.types.customer.IndustryItem.model_fields", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;values&#x27;: FieldInfo(annotation=Values, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;help_text&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;company_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;created_at&#x27;: FieldInfo(annotation=str, required=True), &#x27;updated_at&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.customer.IndustryItem.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "IndustryItem.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Customer", "modulename": "cvpartner.types.customer", "qualname": "Customer", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.Customer.id", "modulename": "cvpartner.types.customer", "qualname": "Customer.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Customer.customer_name", "modulename": "cvpartner.types.customer", "qualname": "Customer.customer_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.CustomerName"}, {"fullname": "cvpartner.types.customer.Customer.customer_description", "modulename": "cvpartner.types.customer", "qualname": "Customer.customer_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.CustomerDescription"}, {"fullname": "cvpartner.types.customer.Customer.customer_description_to_cvs", "modulename": "cvpartner.types.customer", "qualname": "Customer.customer_description_to_cvs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.CustomerDescriptionToCvs"}, {"fullname": "cvpartner.types.customer.Customer.customer_url", "modulename": "cvpartner.types.customer", "qualname": "Customer.customer_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.Customer.external_unique_id", "modulename": "cvpartner.types.customer", "qualname": "Customer.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.customer.Customer.image_width", "modulename": "cvpartner.types.customer", "qualname": "Customer.image_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.customer.Customer.image_height", "modulename": "cvpartner.types.customer", "qualname": "Customer.image_height", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.customer.Customer.image", "modulename": "cvpartner.types.customer", "qualname": "Customer.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.customer.Image"}, {"fullname": "cvpartner.types.customer.Customer.version", "modulename": "cvpartner.types.customer", "qualname": "Customer.version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.customer.Customer.company_id", "modulename": "cvpartner.types.customer", "qualname": "Customer.company_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Customer.masterdata_industry_id", "modulename": "cvpartner.types.customer", "qualname": "Customer.masterdata_industry_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.customer.Customer.created_at", "modulename": "cvpartner.types.customer", "qualname": "Customer.created_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Customer.updated_at", "modulename": "cvpartner.types.customer", "qualname": "Customer.updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.customer.Customer.custom_tags", "modulename": "cvpartner.types.customer", "qualname": "Customer.custom_tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.customer.Customer.project_count", "modulename": "cvpartner.types.customer", "qualname": "Customer.project_count", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.customer.Customer.industry", "modulename": "cvpartner.types.customer", "qualname": "Customer.industry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cvpartner.types.customer.IndustryItem]"}, {"fullname": "cvpartner.types.customer.Customer.model_config", "modulename": "cvpartner.types.customer", "qualname": "Customer.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Customer.model_post_init", "modulename": "cvpartner.types.customer", "qualname": "Customer.model_post_init", "kind": "function", "doc": "<p>This function is meant to behave like a BaseModel method to initialise private attributes.</p>\n\n<p>It takes context as an argument since that's what pydantic-core passes when calling it.</p>\n\n<p>Args:\n    self: The BaseModel instance.\n    __context: The context.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span>, </span><span class=\"param\"><span class=\"n\">__context</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cvpartner.types.customer.Customer.model_fields", "modulename": "cvpartner.types.customer", "qualname": "Customer.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;customer_name&#x27;: FieldInfo(annotation=CustomerName, required=True), &#x27;customer_description&#x27;: FieldInfo(annotation=CustomerDescription, required=True), &#x27;customer_description_to_cvs&#x27;: FieldInfo(annotation=CustomerDescriptionToCvs, required=True), &#x27;customer_url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;image_width&#x27;: FieldInfo(annotation=Union[int, NoneType], required=True), &#x27;image_height&#x27;: FieldInfo(annotation=Union[int, NoneType], required=True), &#x27;image&#x27;: FieldInfo(annotation=Image, required=True), &#x27;version&#x27;: FieldInfo(annotation=int, required=True), &#x27;company_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;masterdata_industry_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;created_at&#x27;: FieldInfo(annotation=str, required=True), &#x27;updated_at&#x27;: FieldInfo(annotation=str, required=True), &#x27;custom_tags&#x27;: FieldInfo(annotation=List, required=True), &#x27;project_count&#x27;: FieldInfo(annotation=int, required=True), &#x27;industry&#x27;: FieldInfo(annotation=Union[IndustryItem, NoneType], required=True)}"}, {"fullname": "cvpartner.types.customer.Customer.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "Customer.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Customers", "modulename": "cvpartner.types.customer", "qualname": "Customers", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.customer.Customers.customers", "modulename": "cvpartner.types.customer", "qualname": "Customers.customers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.customer.Customer]"}, {"fullname": "cvpartner.types.customer.Customers.total", "modulename": "cvpartner.types.customer", "qualname": "Customers.total", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.customer.Customers.model_config", "modulename": "cvpartner.types.customer", "qualname": "Customers.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.customer.Customers.model_fields", "modulename": "cvpartner.types.customer", "qualname": "Customers.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;customers&#x27;: FieldInfo(annotation=List[Customer], required=True), &#x27;total&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.customer.Customers.model_computed_fields", "modulename": "cvpartner.types.customer", "qualname": "Customers.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv", "modulename": "cvpartner.types.cv", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.cv.TranslatedString", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.cv.TranslatedString.no", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.TranslatedString.int", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.TranslatedString.se", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.se", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.TranslatedString.dk", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.dk", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.TranslatedString.fi", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.fi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.TranslatedString.model_config", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.TranslatedString.model_fields", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;no&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;int&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;se&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;dk&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;fi&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.TranslatedString.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "TranslatedString.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.CVField", "modulename": "cvpartner.types.cv", "qualname": "CVField", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.cv.CVField.field_id", "modulename": "cvpartner.types.cv", "qualname": "CVField.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.CVField.created_at", "modulename": "cvpartner.types.cv", "qualname": "CVField.created_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVField.updated_at", "modulename": "cvpartner.types.cv", "qualname": "CVField.updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVField.owner_updated_at", "modulename": "cvpartner.types.cv", "qualname": "CVField.owner_updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVField.order", "modulename": "cvpartner.types.cv", "qualname": "CVField.order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.CVField.recently_added", "modulename": "cvpartner.types.cv", "qualname": "CVField.recently_added", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "cvpartner.types.cv.CVField.starred", "modulename": "cvpartner.types.cv", "qualname": "CVField.starred", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "cvpartner.types.cv.CVField.starred_order", "modulename": "cvpartner.types.cv", "qualname": "CVField.starred_order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.CVField.version", "modulename": "cvpartner.types.cv", "qualname": "CVField.version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.CVField.modifier_id", "modulename": "cvpartner.types.cv", "qualname": "CVField.modifier_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVField.disabled", "modulename": "cvpartner.types.cv", "qualname": "CVField.disabled", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "cvpartner.types.cv.CVField.model_config", "modulename": "cvpartner.types.cv", "qualname": "CVField.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.CVField.model_fields", "modulename": "cvpartner.types.cv", "qualname": "CVField.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.CVField.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "CVField.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Blog", "modulename": "cvpartner.types.cv", "qualname": "Blog", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Blog.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Blog.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Blog.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Blog.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Blog.long_description", "modulename": "cvpartner.types.cv", "qualname": "Blog.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Blog.month", "modulename": "cvpartner.types.cv", "qualname": "Blog.month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Blog.name", "modulename": "cvpartner.types.cv", "qualname": "Blog.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Blog.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Blog.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Blog.url", "modulename": "cvpartner.types.cv", "qualname": "Blog.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Blog.year", "modulename": "cvpartner.types.cv", "qualname": "Blog.year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Blog.model_config", "modulename": "cvpartner.types.cv", "qualname": "Blog.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Blog.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Blog.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;year&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.Blog.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Blog.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Certification", "modulename": "cvpartner.types.cv", "qualname": "Certification", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Certification.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Certification.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Certification.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Certification.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Certification.long_description", "modulename": "cvpartner.types.cv", "qualname": "Certification.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Certification.month", "modulename": "cvpartner.types.cv", "qualname": "Certification.month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Certification.month_expire", "modulename": "cvpartner.types.cv", "qualname": "Certification.month_expire", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Certification.name", "modulename": "cvpartner.types.cv", "qualname": "Certification.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Certification.organiser", "modulename": "cvpartner.types.cv", "qualname": "Certification.organiser", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Certification.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Certification.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Certification.year", "modulename": "cvpartner.types.cv", "qualname": "Certification.year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Certification.year_expire", "modulename": "cvpartner.types.cv", "qualname": "Certification.year_expire", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Certification.attachments", "modulename": "cvpartner.types.cv", "qualname": "Certification.attachments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.cv.Certification.model_config", "modulename": "cvpartner.types.cv", "qualname": "Certification.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Certification.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Certification.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;month_expire&#x27;: FieldInfo(annotation=Any, required=True), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;organiser&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;year&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;year_expire&#x27;: FieldInfo(annotation=Any, required=True), &#x27;attachments&#x27;: FieldInfo(annotation=List, required=True)}"}, {"fullname": "cvpartner.types.cv.Certification.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Certification.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Course", "modulename": "cvpartner.types.cv", "qualname": "Course", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Course.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Course.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Course.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Course.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Course.long_description", "modulename": "cvpartner.types.cv", "qualname": "Course.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Course.month", "modulename": "cvpartner.types.cv", "qualname": "Course.month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Course.name", "modulename": "cvpartner.types.cv", "qualname": "Course.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Course.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Course.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Course.program", "modulename": "cvpartner.types.cv", "qualname": "Course.program", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Course.year", "modulename": "cvpartner.types.cv", "qualname": "Course.year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Course.attachments", "modulename": "cvpartner.types.cv", "qualname": "Course.attachments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.cv.Course.model_config", "modulename": "cvpartner.types.cv", "qualname": "Course.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Course.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Course.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;program&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;year&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;attachments&#x27;: FieldInfo(annotation=List, required=True)}"}, {"fullname": "cvpartner.types.cv.Course.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Course.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.ProjectExperience", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.ProjectExperience.field_id", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.ProjectExperience.roles", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience.roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.cv.CVField]"}, {"fullname": "cvpartner.types.cv.ProjectExperience.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.ProjectExperience.model_config", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.ProjectExperience.model_fields", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;roles&#x27;: FieldInfo(annotation=List[CVField], required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True)}"}, {"fullname": "cvpartner.types.cv.ProjectExperience.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperience.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.CvRole", "modulename": "cvpartner.types.cv", "qualname": "CvRole", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.CvRole.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "CvRole.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.CvRole.name", "modulename": "cvpartner.types.cv", "qualname": "CvRole.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.CvRole.origin_id", "modulename": "cvpartner.types.cv", "qualname": "CvRole.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.CvRole.years_of_experience", "modulename": "cvpartner.types.cv", "qualname": "CvRole.years_of_experience", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.CvRole.years_of_experience_offset", "modulename": "cvpartner.types.cv", "qualname": "CvRole.years_of_experience_offset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.CvRole.project_experiences", "modulename": "cvpartner.types.cv", "qualname": "CvRole.project_experiences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.cv.ProjectExperience]"}, {"fullname": "cvpartner.types.cv.CvRole.model_config", "modulename": "cvpartner.types.cv", "qualname": "CvRole.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.CvRole.model_fields", "modulename": "cvpartner.types.cv", "qualname": "CvRole.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;years_of_experience&#x27;: FieldInfo(annotation=int, required=True), &#x27;years_of_experience_offset&#x27;: FieldInfo(annotation=int, required=True), &#x27;project_experiences&#x27;: FieldInfo(annotation=List[ProjectExperience], required=True)}"}, {"fullname": "cvpartner.types.cv.CvRole.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "CvRole.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Education", "modulename": "cvpartner.types.cv", "qualname": "Education", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Education.degree", "modulename": "cvpartner.types.cv", "qualname": "Education.degree", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Education.description", "modulename": "cvpartner.types.cv", "qualname": "Education.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Education.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Education.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Education.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Education.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Education.month_from", "modulename": "cvpartner.types.cv", "qualname": "Education.month_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Education.month_to", "modulename": "cvpartner.types.cv", "qualname": "Education.month_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Education.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Education.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Education.school", "modulename": "cvpartner.types.cv", "qualname": "Education.school", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Education.year_from", "modulename": "cvpartner.types.cv", "qualname": "Education.year_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Education.year_to", "modulename": "cvpartner.types.cv", "qualname": "Education.year_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Education.attachments", "modulename": "cvpartner.types.cv", "qualname": "Education.attachments", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.cv.Education.model_config", "modulename": "cvpartner.types.cv", "qualname": "Education.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Education.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Education.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;degree&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;month_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;month_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;school&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;year_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;year_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;attachments&#x27;: FieldInfo(annotation=List, required=True)}"}, {"fullname": "cvpartner.types.cv.Education.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Education.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.HonorsAward", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.HonorsAward.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.HonorsAward.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.HonorsAward.for_work", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.for_work", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.HonorsAward.issuer", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.issuer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.HonorsAward.long_description", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.HonorsAward.month", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.HonorsAward.name", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.HonorsAward.origin_id", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.HonorsAward.year", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.HonorsAward.model_config", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.HonorsAward.model_fields", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;for_work&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;issuer&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;year&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.HonorsAward.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "HonorsAward.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.KeyQualification", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.KeyQualification.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.KeyQualification.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.KeyQualification.label", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.cv.KeyQualification.long_description", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.KeyQualification.origin_id", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.KeyQualification.tag_line", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.tag_line", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.cv.KeyQualification.model_config", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.KeyQualification.model_fields", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;label&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;tag_line&#x27;: FieldInfo(annotation=Dict[str, Any], required=True)}"}, {"fullname": "cvpartner.types.cv.KeyQualification.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "KeyQualification.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Language", "modulename": "cvpartner.types.cv", "qualname": "Language", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Language.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Language.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Language.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Language.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Language.level", "modulename": "cvpartner.types.cv", "qualname": "Language.level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Language.name", "modulename": "cvpartner.types.cv", "qualname": "Language.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Language.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Language.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Language.model_config", "modulename": "cvpartner.types.cv", "qualname": "Language.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Language.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Language.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;level&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True)}"}, {"fullname": "cvpartner.types.cv.Language.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Language.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Position", "modulename": "cvpartner.types.cv", "qualname": "Position", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Position.description", "modulename": "cvpartner.types.cv", "qualname": "Position.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Position.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Position.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Position.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Position.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Position.name", "modulename": "cvpartner.types.cv", "qualname": "Position.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Position.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Position.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Position.roles", "modulename": "cvpartner.types.cv", "qualname": "Position.roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[cvpartner.types.cv.CVField]"}, {"fullname": "cvpartner.types.cv.Position.year_from", "modulename": "cvpartner.types.cv", "qualname": "Position.year_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Position.year_to", "modulename": "cvpartner.types.cv", "qualname": "Position.year_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Position.years_of_experience", "modulename": "cvpartner.types.cv", "qualname": "Position.years_of_experience", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.Position.model_config", "modulename": "cvpartner.types.cv", "qualname": "Position.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Position.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Position.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;name&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;roles&#x27;: FieldInfo(annotation=list[CVField], required=False, default=[]), &#x27;year_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;year_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;years_of_experience&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.Position.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Position.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Presentation", "modulename": "cvpartner.types.cv", "qualname": "Presentation", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Presentation.description", "modulename": "cvpartner.types.cv", "qualname": "Presentation.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Presentation.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Presentation.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Presentation.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Presentation.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Presentation.long_description", "modulename": "cvpartner.types.cv", "qualname": "Presentation.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Presentation.month", "modulename": "cvpartner.types.cv", "qualname": "Presentation.month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Presentation.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Presentation.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Presentation.year", "modulename": "cvpartner.types.cv", "qualname": "Presentation.year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Presentation.model_config", "modulename": "cvpartner.types.cv", "qualname": "Presentation.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Presentation.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Presentation.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;year&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.Presentation.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Presentation.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.base_duration_in_years", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.base_duration_in_years", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.offset_duration_in_years", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.offset_duration_in_years", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.proficiency", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.proficiency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.tags", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.total_duration_in_years", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.total_duration_in_years", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.model_config", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.model_fields", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;base_duration_in_years&#x27;: FieldInfo(annotation=int, required=True), &#x27;offset_duration_in_years&#x27;: FieldInfo(annotation=int, required=True), &#x27;proficiency&#x27;: FieldInfo(annotation=int, required=True), &#x27;tags&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;total_duration_in_years&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.cv.ProjectExperienceSkill.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceSkill.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Role", "modulename": "cvpartner.types.cv", "qualname": "Role", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Role.cv_role_id", "modulename": "cvpartner.types.cv", "qualname": "Role.cv_role_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Role.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Role.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Role.long_description", "modulename": "cvpartner.types.cv", "qualname": "Role.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Role.name", "modulename": "cvpartner.types.cv", "qualname": "Role.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cvpartner.types.cv.TranslatedString]"}, {"fullname": "cvpartner.types.cv.Role.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Role.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Role.summary", "modulename": "cvpartner.types.cv", "qualname": "Role.summary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.cv.Role.model_config", "modulename": "cvpartner.types.cv", "qualname": "Role.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Role.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Role.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;cv_role_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;name&#x27;: FieldInfo(annotation=Union[TranslatedString, NoneType], required=False, default=None), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;summary&#x27;: FieldInfo(annotation=Dict[str, Any], required=False, default={})}"}, {"fullname": "cvpartner.types.cv.Role.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Role.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "ProjectExperience"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.area_amt", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.area_amt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.area_unit", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.area_unit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.customer", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.customer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.customer_anonymized", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.customer_anonymized", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.customer_description", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.customer_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.customer_selected", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.customer_selected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.customer_value_proposition", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.customer_value_proposition", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.description", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.exclude_tags", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.exclude_tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[Any]]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.expected_roll_off_date", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.expected_roll_off_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.extent_hours", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.extent_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.industry", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.industry", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.location_country_code", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.location_country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.long_description", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.month_from", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.month_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.month_to", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.month_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.origin_id", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.percent_allocated", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.percent_allocated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.project_experience_skills", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.project_experience_skills", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.ProjectExperienceSkill]]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.project_extent_amt", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.project_extent_amt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.project_extent_currency", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.project_extent_currency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.project_extent_hours", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.project_extent_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.project_type", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.project_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.related_work_experience_id", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.related_work_experience_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.roles", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.cv.Role]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.total_extent_amt", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.total_extent_amt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.total_extent_currency", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.total_extent_currency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.total_extent_hours", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.total_extent_hours", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.year_from", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.year_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.year_to", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.year_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.images", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.images", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.model_config", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.model_fields", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;roles&#x27;: FieldInfo(annotation=List[Role], required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;area_amt&#x27;: FieldInfo(annotation=Any, required=True), &#x27;area_unit&#x27;: FieldInfo(annotation=Any, required=True), &#x27;customer&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;customer_anonymized&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;customer_description&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;customer_selected&#x27;: FieldInfo(annotation=str, required=True), &#x27;customer_value_proposition&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;exclude_tags&#x27;: FieldInfo(annotation=Union[List[Any], NoneType], required=True), &#x27;expected_roll_off_date&#x27;: FieldInfo(annotation=Any, required=True), &#x27;extent_hours&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;industry&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;location_country_code&#x27;: FieldInfo(annotation=Any, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;month_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;percent_allocated&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;project_experience_skills&#x27;: FieldInfo(annotation=Union[List[ProjectExperienceSkill], NoneType], required=False, default=[]), &#x27;project_extent_amt&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;project_extent_currency&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;project_extent_hours&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;project_type&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;related_work_experience_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;total_extent_amt&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;total_extent_currency&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;total_extent_hours&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;year_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;year_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;images&#x27;: FieldInfo(annotation=List, required=True)}"}, {"fullname": "cvpartner.types.cv.ProjectExperienceExpanded.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "ProjectExperienceExpanded.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.TechnologySkill", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.TechnologySkill.field_id", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.TechnologySkill.base_duration_in_years", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.base_duration_in_years", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.TechnologySkill.offset_duration_in_years", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.offset_duration_in_years", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.TechnologySkill.proficiency", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.proficiency", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.TechnologySkill.tags", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.TechnologySkill.total_duration_in_years", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.total_duration_in_years", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.cv.TechnologySkill.model_config", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.TechnologySkill.model_fields", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;base_duration_in_years&#x27;: FieldInfo(annotation=int, required=True), &#x27;offset_duration_in_years&#x27;: FieldInfo(annotation=int, required=True), &#x27;proficiency&#x27;: FieldInfo(annotation=int, required=True), &#x27;tags&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;total_duration_in_years&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.cv.TechnologySkill.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "TechnologySkill.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Technology", "modulename": "cvpartner.types.cv", "qualname": "Technology", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.Technology.field_id", "modulename": "cvpartner.types.cv", "qualname": "Technology.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.Technology.category", "modulename": "cvpartner.types.cv", "qualname": "Technology.category", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.Technology.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "Technology.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Technology.exclude_tags", "modulename": "cvpartner.types.cv", "qualname": "Technology.exclude_tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[Any]]"}, {"fullname": "cvpartner.types.cv.Technology.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "Technology.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Technology.origin_id", "modulename": "cvpartner.types.cv", "qualname": "Technology.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.Technology.technology_skills", "modulename": "cvpartner.types.cv", "qualname": "Technology.technology_skills", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.TechnologySkill]]"}, {"fullname": "cvpartner.types.cv.Technology.uncategorized", "modulename": "cvpartner.types.cv", "qualname": "Technology.uncategorized", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.Technology.model_config", "modulename": "cvpartner.types.cv", "qualname": "Technology.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Technology.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Technology.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;category&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;exclude_tags&#x27;: FieldInfo(annotation=Union[List[Any], NoneType], required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;technology_skills&#x27;: FieldInfo(annotation=Union[List[TechnologySkill], NoneType], required=False, default=None), &#x27;uncategorized&#x27;: FieldInfo(annotation=bool, required=True)}"}, {"fullname": "cvpartner.types.cv.Technology.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Technology.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.WorkExperience", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.WorkExperience.field_id", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.WorkExperience.description", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.WorkExperience.diverged_from_master", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.diverged_from_master", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.cv.WorkExperience.employer", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.employer", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.WorkExperience.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.WorkExperience.long_description", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.long_description", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.WorkExperience.month_from", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.month_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.WorkExperience.month_to", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.month_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.WorkExperience.origin_id", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.origin_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.WorkExperience.year_from", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.year_from", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.WorkExperience.year_to", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.year_to", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.WorkExperience.model_config", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.WorkExperience.model_fields", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;diverged_from_master&#x27;: FieldInfo(annotation=bool, required=True), &#x27;employer&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;long_description&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;month_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;month_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;origin_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;year_from&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;year_to&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.WorkExperience.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "WorkExperience.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.URL", "modulename": "cvpartner.types.cv", "qualname": "URL", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.cv.URL.url", "modulename": "cvpartner.types.cv", "qualname": "URL.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.URL.model_config", "modulename": "cvpartner.types.cv", "qualname": "URL.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.URL.model_fields", "modulename": "cvpartner.types.cv", "qualname": "URL.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.URL.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "URL.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Image", "modulename": "cvpartner.types.cv", "qualname": "Image", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.cv.Image.url", "modulename": "cvpartner.types.cv", "qualname": "Image.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.Image.thumb", "modulename": "cvpartner.types.cv", "qualname": "Image.thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.URL"}, {"fullname": "cvpartner.types.cv.Image.fit_thumb", "modulename": "cvpartner.types.cv", "qualname": "Image.fit_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.URL"}, {"fullname": "cvpartner.types.cv.Image.large", "modulename": "cvpartner.types.cv", "qualname": "Image.large", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.URL"}, {"fullname": "cvpartner.types.cv.Image.small_thumb", "modulename": "cvpartner.types.cv", "qualname": "Image.small_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.URL"}, {"fullname": "cvpartner.types.cv.Image.model_config", "modulename": "cvpartner.types.cv", "qualname": "Image.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.Image.model_fields", "modulename": "cvpartner.types.cv", "qualname": "Image.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;thumb&#x27;: FieldInfo(annotation=URL, required=True), &#x27;fit_thumb&#x27;: FieldInfo(annotation=URL, required=True), &#x27;large&#x27;: FieldInfo(annotation=URL, required=True), &#x27;small_thumb&#x27;: FieldInfo(annotation=URL, required=True)}"}, {"fullname": "cvpartner.types.cv.Image.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "Image.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.CVResponse", "modulename": "cvpartner.types.cv", "qualname": "CVResponse", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "CVField"}, {"fullname": "cvpartner.types.cv.CVResponse.blogs", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.blogs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.cv.Blog]"}, {"fullname": "cvpartner.types.cv.CVResponse.born_day", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.born_day", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.CVResponse.born_month", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.born_month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.CVResponse.born_year", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.born_year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "cvpartner.types.cv.CVResponse.bruker_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.bruker_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.CVResponse.certifications", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.certifications", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.Certification]]"}, {"fullname": "cvpartner.types.cv.CVResponse.courses", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.courses", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.Course]]"}, {"fullname": "cvpartner.types.cv.CVResponse.custom_tag_ids", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.custom_tag_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List]"}, {"fullname": "cvpartner.types.cv.CVResponse.cv_roles", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.cv_roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.CvRole]]"}, {"fullname": "cvpartner.types.cv.CVResponse.default", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "cvpartner.types.cv.CVResponse.educations", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.educations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.Education]]"}, {"fullname": "cvpartner.types.cv.CVResponse.honors_awards", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.honors_awards", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.HonorsAward]]"}, {"fullname": "cvpartner.types.cv.CVResponse.imported_date", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.imported_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.key_qualifications", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.key_qualifications", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.KeyQualification]]"}, {"fullname": "cvpartner.types.cv.CVResponse.landline", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.landline", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.languages", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.languages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.Language]]"}, {"fullname": "cvpartner.types.cv.CVResponse.level", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.level", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.locked_at", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.locked_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.locked_until", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.locked_until", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.name_multilang", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.name_multilang", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, Any]]"}, {"fullname": "cvpartner.types.cv.CVResponse.nationality", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.nationality", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cvpartner.types.cv.TranslatedString]"}, {"fullname": "cvpartner.types.cv.CVResponse.navn", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.navn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.cv.CVResponse.owner_updated_at_significant", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.owner_updated_at_significant", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.place_of_residence", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.place_of_residence", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cvpartner.types.cv.TranslatedString]"}, {"fullname": "cvpartner.types.cv.CVResponse.positions", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.positions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.cv.Position]"}, {"fullname": "cvpartner.types.cv.CVResponse.presentations", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.presentations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.cv.Presentation]"}, {"fullname": "cvpartner.types.cv.CVResponse.project_experiences", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.project_experiences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[cvpartner.types.cv.ProjectExperienceExpanded]]"}, {"fullname": "cvpartner.types.cv.CVResponse.technologies", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.technologies", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[cvpartner.types.cv.Technology]]"}, {"fullname": "cvpartner.types.cv.CVResponse.telefon", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.telefon", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.tilbud_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.tilbud_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.title", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.cv.TranslatedString"}, {"fullname": "cvpartner.types.cv.CVResponse.twitter", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.twitter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.work_experiences", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.work_experiences", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[cvpartner.types.cv.WorkExperience]]"}, {"fullname": "cvpartner.types.cv.CVResponse.name", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.user_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.company_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.company_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.external_unique_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.email", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.country_code", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.language_code", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.language_codes", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.language_codes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List[str]]"}, {"fullname": "cvpartner.types.cv.CVResponse.proposal", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.proposal", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "cvpartner.types.cv.CVResponse.custom_tags", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.custom_tags", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List]"}, {"fullname": "cvpartner.types.cv.CVResponse.updated_ago", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.updated_ago", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.template_document_type", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.template_document_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.default_word_template_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.default_word_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.cv.CVResponse.default_ppt_template_id", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.default_ppt_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.cv.CVResponse.highlighted_roles", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.highlighted_roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[List]"}, {"fullname": "cvpartner.types.cv.CVResponse.image", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[cvpartner.types.cv.Image]"}, {"fullname": "cvpartner.types.cv.CVResponse.can_write", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.can_write", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "cvpartner.types.cv.CVResponse.model_config", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.cv.CVResponse.model_fields", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;created_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;recently_added&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;starred_order&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;version&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;modifier_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;disabled&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;blogs&#x27;: FieldInfo(annotation=List[Blog], required=False, default=[]), &#x27;born_day&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;born_month&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;born_year&#x27;: FieldInfo(annotation=Union[int, NoneType], required=False, default=None), &#x27;bruker_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;certifications&#x27;: FieldInfo(annotation=Union[List[Certification], NoneType], required=False, default=None), &#x27;courses&#x27;: FieldInfo(annotation=Union[List[Course], NoneType], required=False, default=None), &#x27;custom_tag_ids&#x27;: FieldInfo(annotation=Union[List, NoneType], required=False, default=None), &#x27;cv_roles&#x27;: FieldInfo(annotation=Union[List[CvRole], NoneType], required=True), &#x27;default&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None), &#x27;educations&#x27;: FieldInfo(annotation=Union[List[Education], NoneType], required=False, default=None), &#x27;honors_awards&#x27;: FieldInfo(annotation=Union[List[HonorsAward], NoneType], required=False, default=[]), &#x27;imported_date&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;key_qualifications&#x27;: FieldInfo(annotation=Union[List[KeyQualification], NoneType], required=False, default=None), &#x27;landline&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;languages&#x27;: FieldInfo(annotation=Union[List[Language], NoneType], required=False, default=None), &#x27;level&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;locked_at&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;locked_until&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;name_multilang&#x27;: FieldInfo(annotation=Union[Dict[str, Any], NoneType], required=False, default=None), &#x27;nationality&#x27;: FieldInfo(annotation=Union[TranslatedString, NoneType], required=False, default=None), &#x27;navn&#x27;: FieldInfo(annotation=str, required=True), &#x27;owner_updated_at_significant&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;place_of_residence&#x27;: FieldInfo(annotation=Union[TranslatedString, NoneType], required=False, default=None), &#x27;positions&#x27;: FieldInfo(annotation=List[Position], required=False, default=[]), &#x27;presentations&#x27;: FieldInfo(annotation=List[Presentation], required=False, default=[]), &#x27;project_experiences&#x27;: FieldInfo(annotation=Union[List[ProjectExperienceExpanded], NoneType], required=False, default=None), &#x27;technologies&#x27;: FieldInfo(annotation=Union[list[Technology], NoneType], required=False, default=None), &#x27;telefon&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;tilbud_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;title&#x27;: FieldInfo(annotation=TranslatedString, required=True), &#x27;twitter&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;work_experiences&#x27;: FieldInfo(annotation=Union[list[WorkExperience], NoneType], required=False, default=None), &#x27;name&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;user_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;company_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;email&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;country_code&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;language_code&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;language_codes&#x27;: FieldInfo(annotation=Union[List[str], NoneType], required=False, default=None), &#x27;proposal&#x27;: FieldInfo(annotation=Union[Any, NoneType], required=False, default=None), &#x27;custom_tags&#x27;: FieldInfo(annotation=Union[List, NoneType], required=False, default=None), &#x27;updated_ago&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;template_document_type&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;default_word_template_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;default_ppt_template_id&#x27;: FieldInfo(annotation=Any, required=False, default=None), &#x27;highlighted_roles&#x27;: FieldInfo(annotation=Union[List, NoneType], required=False, default=None), &#x27;image&#x27;: FieldInfo(annotation=Union[Image, NoneType], required=False, default=None), &#x27;can_write&#x27;: FieldInfo(annotation=Union[bool, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.cv.CVResponse.model_computed_fields", "modulename": "cvpartner.types.cv", "qualname": "CVResponse.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.department", "modulename": "cvpartner.types.department", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.department.Department", "modulename": "cvpartner.types.department", "qualname": "Department", "kind": "class", "doc": "<p>Department is a list of tuples of employees &amp; CVResponses</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.department.Department.root", "modulename": "cvpartner.types.department", "qualname": "Department.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[Tuple[cvpartner.types.employee.Employee, cvpartner.types.cv.CVResponse]]"}, {"fullname": "cvpartner.types.department.Department.model_config", "modulename": "cvpartner.types.department", "qualname": "Department.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.department.Department.model_fields", "modulename": "cvpartner.types.department", "qualname": "Department.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;root&#x27;: FieldInfo(annotation=List[Tuple[Employee, CVResponse]], required=False, default=[])}"}, {"fullname": "cvpartner.types.department.Department.model_computed_fields", "modulename": "cvpartner.types.department", "qualname": "Department.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee", "modulename": "cvpartner.types.employee", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.employee.Thumb", "modulename": "cvpartner.types.employee", "qualname": "Thumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.Thumb.url", "modulename": "cvpartner.types.employee", "qualname": "Thumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Thumb.model_config", "modulename": "cvpartner.types.employee", "qualname": "Thumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Thumb.model_fields", "modulename": "cvpartner.types.employee", "qualname": "Thumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.employee.Thumb.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "Thumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.FitThumb", "modulename": "cvpartner.types.employee", "qualname": "FitThumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.FitThumb.url", "modulename": "cvpartner.types.employee", "qualname": "FitThumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.FitThumb.model_config", "modulename": "cvpartner.types.employee", "qualname": "FitThumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.FitThumb.model_fields", "modulename": "cvpartner.types.employee", "qualname": "FitThumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.employee.FitThumb.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "FitThumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Large", "modulename": "cvpartner.types.employee", "qualname": "Large", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.Large.url", "modulename": "cvpartner.types.employee", "qualname": "Large.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Large.model_config", "modulename": "cvpartner.types.employee", "qualname": "Large.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Large.model_fields", "modulename": "cvpartner.types.employee", "qualname": "Large.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.employee.Large.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "Large.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.SmallThumb", "modulename": "cvpartner.types.employee", "qualname": "SmallThumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.SmallThumb.url", "modulename": "cvpartner.types.employee", "qualname": "SmallThumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.SmallThumb.model_config", "modulename": "cvpartner.types.employee", "qualname": "SmallThumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.SmallThumb.model_fields", "modulename": "cvpartner.types.employee", "qualname": "SmallThumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.employee.SmallThumb.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "SmallThumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Image", "modulename": "cvpartner.types.employee", "qualname": "Image", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.Image.url", "modulename": "cvpartner.types.employee", "qualname": "Image.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Image.thumb", "modulename": "cvpartner.types.employee", "qualname": "Image.thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.Thumb"}, {"fullname": "cvpartner.types.employee.Image.fit_thumb", "modulename": "cvpartner.types.employee", "qualname": "Image.fit_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.FitThumb"}, {"fullname": "cvpartner.types.employee.Image.large", "modulename": "cvpartner.types.employee", "qualname": "Image.large", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.Large"}, {"fullname": "cvpartner.types.employee.Image.small_thumb", "modulename": "cvpartner.types.employee", "qualname": "Image.small_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.SmallThumb"}, {"fullname": "cvpartner.types.employee.Image.model_config", "modulename": "cvpartner.types.employee", "qualname": "Image.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Image.model_fields", "modulename": "cvpartner.types.employee", "qualname": "Image.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;thumb&#x27;: FieldInfo(annotation=Thumb, required=True), &#x27;fit_thumb&#x27;: FieldInfo(annotation=FitThumb, required=True), &#x27;large&#x27;: FieldInfo(annotation=Large, required=True), &#x27;small_thumb&#x27;: FieldInfo(annotation=SmallThumb, required=True)}"}, {"fullname": "cvpartner.types.employee.Image.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "Image.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Titles", "modulename": "cvpartner.types.employee", "qualname": "Titles", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.Titles.no", "modulename": "cvpartner.types.employee", "qualname": "Titles.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Titles.int", "modulename": "cvpartner.types.employee", "qualname": "Titles.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Titles.se", "modulename": "cvpartner.types.employee", "qualname": "Titles.se", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Titles.model_config", "modulename": "cvpartner.types.employee", "qualname": "Titles.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Titles.model_fields", "modulename": "cvpartner.types.employee", "qualname": "Titles.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;no&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;int&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;se&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.employee.Titles.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "Titles.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Employee", "modulename": "cvpartner.types.employee", "qualname": "Employee", "kind": "class", "doc": "<p>The v4 version of the API</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.Employee.image", "modulename": "cvpartner.types.employee", "qualname": "Employee.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.Image"}, {"fullname": "cvpartner.types.employee.Employee.title", "modulename": "cvpartner.types.employee", "qualname": "Employee.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Employee.titles", "modulename": "cvpartner.types.employee", "qualname": "Employee.titles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.Titles"}, {"fullname": "cvpartner.types.employee.Employee.telephone", "modulename": "cvpartner.types.employee", "qualname": "Employee.telephone", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Employee.email", "modulename": "cvpartner.types.employee", "qualname": "Employee.email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Employee.navn", "modulename": "cvpartner.types.employee", "qualname": "Employee.navn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Employee.name", "modulename": "cvpartner.types.employee", "qualname": "Employee.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Employee.name_multilang", "modulename": "cvpartner.types.employee", "qualname": "Employee.name_multilang", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.employee.Employee.is_external", "modulename": "cvpartner.types.employee", "qualname": "Employee.is_external", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.employee.Employee.is_deactivated", "modulename": "cvpartner.types.employee", "qualname": "Employee.is_deactivated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.employee.Employee.bruker_id", "modulename": "cvpartner.types.employee", "qualname": "Employee.bruker_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.user_id", "modulename": "cvpartner.types.employee", "qualname": "Employee.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.company_id", "modulename": "cvpartner.types.employee", "qualname": "Employee.company_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.field_id", "modulename": "cvpartner.types.employee", "qualname": "Employee.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.id", "modulename": "cvpartner.types.employee", "qualname": "Employee.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.updated_at", "modulename": "cvpartner.types.employee", "qualname": "Employee.updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.updated_ago", "modulename": "cvpartner.types.employee", "qualname": "Employee.updated_ago", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.owner_updated_at", "modulename": "cvpartner.types.employee", "qualname": "Employee.owner_updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.employee.Employee.default_word_template_id", "modulename": "cvpartner.types.employee", "qualname": "Employee.default_word_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.default_ppt_template_id", "modulename": "cvpartner.types.employee", "qualname": "Employee.default_ppt_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.employee.Employee.country_code", "modulename": "cvpartner.types.employee", "qualname": "Employee.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.language_code", "modulename": "cvpartner.types.employee", "qualname": "Employee.language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.language_codes", "modulename": "cvpartner.types.employee", "qualname": "Employee.language_codes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.employee.Employee.template_document_type", "modulename": "cvpartner.types.employee", "qualname": "Employee.template_document_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.Employee.model_config", "modulename": "cvpartner.types.employee", "qualname": "Employee.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.Employee.model_fields", "modulename": "cvpartner.types.employee", "qualname": "Employee.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;image&#x27;: FieldInfo(annotation=Image, required=True), &#x27;title&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;titles&#x27;: FieldInfo(annotation=Titles, required=True), &#x27;telephone&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;email&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;navn&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;name&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;name_multilang&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;is_external&#x27;: FieldInfo(annotation=bool, required=True), &#x27;is_deactivated&#x27;: FieldInfo(annotation=bool, required=True), &#x27;bruker_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;user_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;company_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;updated_at&#x27;: FieldInfo(annotation=str, required=True), &#x27;updated_ago&#x27;: FieldInfo(annotation=str, required=True), &#x27;owner_updated_at&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;default_word_template_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;default_ppt_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;country_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;language_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;language_codes&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;template_document_type&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.employee.Employee.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "Employee.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.EmployeeMeta", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.cv", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.cv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.employee.Employee"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.preview_url", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.preview_url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.highlight", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.highlight", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.index", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.index", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.id", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.model_config", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.model_fields", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cv&#x27;: FieldInfo(annotation=Employee, required=True), &#x27;preview_url&#x27;: FieldInfo(annotation=str, required=True), &#x27;highlight&#x27;: FieldInfo(annotation=str, required=True), &#x27;index&#x27;: FieldInfo(annotation=int, required=True), &#x27;id&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.employee.EmployeeMeta.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "EmployeeMeta.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult.cvs", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult.cvs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.employee.EmployeeMeta]"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult.facets", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult.facets", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult.total", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult.total", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult.model_config", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult.model_fields", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;cvs&#x27;: FieldInfo(annotation=List[EmployeeMeta], required=True), &#x27;facets&#x27;: FieldInfo(annotation=Dict[str, Any], required=True), &#x27;total&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.employee.EmployeeSearchResult.model_computed_fields", "modulename": "cvpartner.types.employee", "qualname": "EmployeeSearchResult.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.office", "modulename": "cvpartner.types.office", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.office.Office", "modulename": "cvpartner.types.office", "qualname": "Office", "kind": "class", "doc": "<p>Office is what we call department.\n'UX', 'CX', 'Frontend' and 'Platforms &amp; services' are all offices.</p>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.office.Office.office_id", "modulename": "cvpartner.types.office", "qualname": "Office.office_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.office.Office.name", "modulename": "cvpartner.types.office", "qualname": "Office.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.office.Office.selected", "modulename": "cvpartner.types.office", "qualname": "Office.selected", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.office.Office.default_word_template_id", "modulename": "cvpartner.types.office", "qualname": "Office.default_word_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.office.Office.default_ppt_template_id", "modulename": "cvpartner.types.office", "qualname": "Office.default_ppt_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.office.Office.cv_template_id", "modulename": "cvpartner.types.office", "qualname": "Office.cv_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.office.Office.cv_template_type", "modulename": "cvpartner.types.office", "qualname": "Office.cv_template_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.office.Office.country_id", "modulename": "cvpartner.types.office", "qualname": "Office.country_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.office.Office.country_code", "modulename": "cvpartner.types.office", "qualname": "Office.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.office.Office.override_language_code", "modulename": "cvpartner.types.office", "qualname": "Office.override_language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "cvpartner.types.office.Office.num_users", "modulename": "cvpartner.types.office", "qualname": "Office.num_users", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "cvpartner.types.office.Office.model_config", "modulename": "cvpartner.types.office", "qualname": "Office.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.office.Office.model_fields", "modulename": "cvpartner.types.office", "qualname": "Office.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;office_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;selected&#x27;: FieldInfo(annotation=bool, required=True), &#x27;default_word_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;default_ppt_template_id&#x27;: FieldInfo(annotation=Any, required=True), &#x27;cv_template_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;cv_template_type&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;country_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;country_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;override_language_code&#x27;: FieldInfo(annotation=Any, required=True), &#x27;num_users&#x27;: FieldInfo(annotation=int, required=True)}"}, {"fullname": "cvpartner.types.office.Office.model_computed_fields", "modulename": "cvpartner.types.office", "qualname": "Office.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result", "modulename": "cvpartner.types.search_result", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cvpartner.types.search_result.Title", "modulename": "cvpartner.types.search_result", "qualname": "Title", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.Title.no", "modulename": "cvpartner.types.search_result", "qualname": "Title.no", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.Title.int", "modulename": "cvpartner.types.search_result", "qualname": "Title.int", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.Title.se", "modulename": "cvpartner.types.search_result", "qualname": "Title.se", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.Title.dk", "modulename": "cvpartner.types.search_result", "qualname": "Title.dk", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.Title.fi", "modulename": "cvpartner.types.search_result", "qualname": "Title.fi", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.Title.model_config", "modulename": "cvpartner.types.search_result", "qualname": "Title.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Title.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "Title.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;no&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;int&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;se&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;dk&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;fi&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}"}, {"fullname": "cvpartner.types.search_result.Title.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "Title.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Thumb", "modulename": "cvpartner.types.search_result", "qualname": "Thumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.Thumb.url", "modulename": "cvpartner.types.search_result", "qualname": "Thumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.Thumb.model_config", "modulename": "cvpartner.types.search_result", "qualname": "Thumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Thumb.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "Thumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.search_result.Thumb.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "Thumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.FitThumb", "modulename": "cvpartner.types.search_result", "qualname": "FitThumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.FitThumb.url", "modulename": "cvpartner.types.search_result", "qualname": "FitThumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.FitThumb.model_config", "modulename": "cvpartner.types.search_result", "qualname": "FitThumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.FitThumb.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "FitThumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.search_result.FitThumb.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "FitThumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Large", "modulename": "cvpartner.types.search_result", "qualname": "Large", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.Large.url", "modulename": "cvpartner.types.search_result", "qualname": "Large.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.Large.model_config", "modulename": "cvpartner.types.search_result", "qualname": "Large.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Large.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "Large.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.search_result.Large.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "Large.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.SmallThumb", "modulename": "cvpartner.types.search_result", "qualname": "SmallThumb", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.SmallThumb.url", "modulename": "cvpartner.types.search_result", "qualname": "SmallThumb.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SmallThumb.model_config", "modulename": "cvpartner.types.search_result", "qualname": "SmallThumb.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.SmallThumb.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "SmallThumb.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.search_result.SmallThumb.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "SmallThumb.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Image", "modulename": "cvpartner.types.search_result", "qualname": "Image", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.Image.url", "modulename": "cvpartner.types.search_result", "qualname": "Image.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.Image.thumb", "modulename": "cvpartner.types.search_result", "qualname": "Image.thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.search_result.Thumb"}, {"fullname": "cvpartner.types.search_result.Image.fit_thumb", "modulename": "cvpartner.types.search_result", "qualname": "Image.fit_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.search_result.FitThumb"}, {"fullname": "cvpartner.types.search_result.Image.large", "modulename": "cvpartner.types.search_result", "qualname": "Image.large", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.search_result.Large"}, {"fullname": "cvpartner.types.search_result.Image.small_thumb", "modulename": "cvpartner.types.search_result", "qualname": "Image.small_thumb", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.search_result.SmallThumb"}, {"fullname": "cvpartner.types.search_result.Image.model_config", "modulename": "cvpartner.types.search_result", "qualname": "Image.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.Image.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "Image.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;url&#x27;: FieldInfo(annotation=str, required=True), &#x27;thumb&#x27;: FieldInfo(annotation=Thumb, required=True), &#x27;fit_thumb&#x27;: FieldInfo(annotation=FitThumb, required=True), &#x27;large&#x27;: FieldInfo(annotation=Large, required=True), &#x27;small_thumb&#x27;: FieldInfo(annotation=SmallThumb, required=True)}"}, {"fullname": "cvpartner.types.search_result.Image.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "Image.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.SearchItem", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/\">https://docs.pydantic.dev/2.7/concepts/models/</a></p>\n\n<p>A base class for creating Pydantic models.</p>\n\n<p>Attributes:\n    __class_vars__: The names of classvars defined on the model.\n    __private_attributes__: Metadata about the private attributes of the model.\n    __signature__: The signature for instantiating the model.</p>\n\n<pre><code>__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The pydantic-core schema used to build the SchemaValidator and SchemaSerializer.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a `RootModel`.\n__pydantic_serializer__: The pydantic-core SchemaSerializer used to dump instances of the model.\n__pydantic_validator__: The pydantic-core SchemaValidator used to validate instances of the model.\n\n__pydantic_extra__: An instance attribute with the values of extra fields from validation when\n    `model_config['extra'] == 'allow'`.\n__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.\n__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.\n</code></pre>\n", "bases": "pydantic.main.BaseModel"}, {"fullname": "cvpartner.types.search_result.SearchItem.user_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.field_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.field_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.company_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.company_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.company_name", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.company_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.company_subdomains", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.company_subdomains", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.company_group_ids", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.company_group_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.email", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.email", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.external_unique_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.external_unique_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.upn", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.upn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.deactivated", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.deactivated", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.search_result.SearchItem.deactivated_at", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.deactivated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.search_result.SearchItem.created_at", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.created_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.updated_at", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.updated_at", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.role", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.role", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.roles", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.role_allowed_office_ids", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.role_allowed_office_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.search_result.SearchItem.role_allowed_tag_ids", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.role_allowed_tag_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.search_result.SearchItem.office_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.office_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.office_name", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.office_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.country_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.country_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.country_code", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.country_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.language_code", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.language_codes", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.language_codes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.title", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.title", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.search_result.Title"}, {"fullname": "cvpartner.types.search_result.SearchItem.international_toggle", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.international_toggle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.preferred_download_format", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.preferred_download_format", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.masterdata_languages", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.masterdata_languages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.expand_proposals_toggle", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.expand_proposals_toggle", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.search_result.SearchItem.selected_office_ids", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.selected_office_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.include_officeless_reference_projects", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.include_officeless_reference_projects", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cvpartner.types.search_result.SearchItem.selected_tag_ids", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.selected_tag_ids", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List"}, {"fullname": "cvpartner.types.search_result.SearchItem.override_language_code", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.override_language_code", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.default_cv_template_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.default_cv_template_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": None"}, {"fullname": "cvpartner.types.search_result.SearchItem.image", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.image", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cvpartner.types.search_result.Image"}, {"fullname": "cvpartner.types.search_result.SearchItem.name", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.telephone", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.telephone", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "cvpartner.types.search_result.SearchItem.default_cv_id", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.default_cv_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "cvpartner.types.search_result.SearchItem.model_config", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.model_config", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.SearchItem.model_fields", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.model_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;user_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;field_id&#x27;: FieldInfo(annotation=str, required=True, alias=&#x27;_id&#x27;, alias_priority=2), &#x27;id&#x27;: FieldInfo(annotation=str, required=True), &#x27;company_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;company_name&#x27;: FieldInfo(annotation=str, required=True), &#x27;company_subdomains&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;company_group_ids&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;email&#x27;: FieldInfo(annotation=str, required=True), &#x27;external_unique_id&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;upn&#x27;: FieldInfo(annotation=Union[str, NoneType], required=True), &#x27;deactivated&#x27;: FieldInfo(annotation=bool, required=True), &#x27;deactivated_at&#x27;: FieldInfo(annotation=bool, required=True), &#x27;created_at&#x27;: FieldInfo(annotation=str, required=True), &#x27;updated_at&#x27;: FieldInfo(annotation=str, required=True), &#x27;role&#x27;: FieldInfo(annotation=str, required=True), &#x27;roles&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;role_allowed_office_ids&#x27;: FieldInfo(annotation=List, required=True), &#x27;role_allowed_tag_ids&#x27;: FieldInfo(annotation=List, required=True), &#x27;office_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;office_name&#x27;: FieldInfo(annotation=str, required=True), &#x27;country_id&#x27;: FieldInfo(annotation=str, required=True), &#x27;country_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;language_code&#x27;: FieldInfo(annotation=str, required=True), &#x27;language_codes&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;title&#x27;: FieldInfo(annotation=Title, required=True), &#x27;international_toggle&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;preferred_download_format&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;masterdata_languages&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;expand_proposals_toggle&#x27;: FieldInfo(annotation=bool, required=True), &#x27;selected_office_ids&#x27;: FieldInfo(annotation=List[str], required=True), &#x27;include_officeless_reference_projects&#x27;: FieldInfo(annotation=bool, required=True), &#x27;selected_tag_ids&#x27;: FieldInfo(annotation=List, required=True), &#x27;override_language_code&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;default_cv_template_id&#x27;: FieldInfo(annotation=NoneType, required=True), &#x27;image&#x27;: FieldInfo(annotation=Image, required=True), &#x27;name&#x27;: FieldInfo(annotation=str, required=True), &#x27;telephone&#x27;: FieldInfo(annotation=Union[str, NoneType], required=False, default=None), &#x27;default_cv_id&#x27;: FieldInfo(annotation=str, required=True)}"}, {"fullname": "cvpartner.types.search_result.SearchItem.model_computed_fields", "modulename": "cvpartner.types.search_result", "qualname": "SearchItem.model_computed_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "cvpartner.types.search_result.SearchResults", "modulename": "cvpartner.types.search_result", "qualname": "SearchResults", "kind": "class", "doc": "<p>Usage docs: <a href=\"https://docs.pydantic.dev/2.7/concepts/models/#rootmodel-and-custom-root-types\">https://docs.pydantic.dev/2.7/concepts/models/#rootmodel-and-custom-root-types</a></p>\n\n<p>A Pydantic <code>BaseModel</code> for the root object of the model.</p>\n\n<p>Attributes:\n    root: The root object of the model.\n    __pydantic_root_model__: Whether the model is a RootModel.\n    __pydantic_private__: Private fields in the model.\n    __pydantic_extra__: Extra fields in the model.</p>\n", "bases": "pydantic.main.BaseModel, typing.Generic[~RootModelRootType]"}, {"fullname": "cvpartner.types.search_result.SearchResults.root", "modulename": "cvpartner.types.search_result", "qualname": "SearchResults.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[cvpartner.types.search_result.SearchItem]"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();